// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`client should configure properly 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "allowMention": true,
        "commandDirectory": "./src/commands",
        "inhibitorDirectory": "./src/inhibitors",
        "listenerDirectory": "./src/listeners",
        "ownerID": undefined,
        "prefix": Array [
          "!lootbot",
          "!lb",
        ],
      },
      Object {
        "disableEveryone": true,
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`client should create custom command handler 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      CustomClient {
        "_eval": [MockFunction],
        "_pong": [MockFunction],
        "_setPresence": [MockFunction],
        "_validateOptions": [MockFunction],
        "addDatabase": [MockFunction],
        "addListener": [MockFunction],
        "akairoOptions": Object {
          "test": true,
        },
        "build": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "clearInterval": [MockFunction],
        "clearTimeout": [MockFunction],
        "commandHandler": mockConstructor {},
        "createVoiceBroadcast": [MockFunction],
        "destroy": [MockFunction],
        "emit": [MockFunction],
        "eventNames": [MockFunction],
        "fetchApplication": [MockFunction],
        "fetchInvite": [MockFunction],
        "fetchUser": [MockFunction],
        "fetchVoiceRegions": [MockFunction],
        "fetchWebhook": [MockFunction],
        "generateInvite": [MockFunction],
        "getMaxListeners": [MockFunction],
        "inhibitorHandler": mockConstructor {},
        "listenerCount": [MockFunction],
        "listeners": [MockFunction],
        "loadAll": [MockFunction],
        "login": [MockFunction],
        "once": [MockFunction],
        "prependListener": [MockFunction],
        "prependOnceListener": [MockFunction],
        "rawListeners": [MockFunction],
        "removeAllListeners": [MockFunction],
        "removeListener": [MockFunction],
        "setInterval": [MockFunction],
        "setMaxListeners": [MockFunction],
        "setTimeout": [MockFunction],
        "settings": SequelizeProvider {
          "clear": [MockFunction],
          "delete": [MockFunction],
          "get": [MockFunction],
          "init": [MockFunction],
          "set": [MockFunction],
        },
        "sweepMessages": [MockFunction],
        "syncGuilds": [MockFunction],
      },
      Object {
        "test": true,
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`client should create custom inhibitor handler 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      CustomClient {
        "_eval": [MockFunction],
        "_pong": [MockFunction],
        "_setPresence": [MockFunction],
        "_validateOptions": [MockFunction],
        "addDatabase": [MockFunction],
        "addListener": [MockFunction],
        "akairoOptions": Object {
          "test": true,
        },
        "build": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "clearInterval": [MockFunction],
        "clearTimeout": [MockFunction],
        "commandHandler": mockConstructor {},
        "createVoiceBroadcast": [MockFunction],
        "destroy": [MockFunction],
        "emit": [MockFunction],
        "eventNames": [MockFunction],
        "fetchApplication": [MockFunction],
        "fetchInvite": [MockFunction],
        "fetchUser": [MockFunction],
        "fetchVoiceRegions": [MockFunction],
        "fetchWebhook": [MockFunction],
        "generateInvite": [MockFunction],
        "getMaxListeners": [MockFunction],
        "inhibitorHandler": mockConstructor {},
        "listenerCount": [MockFunction],
        "listeners": [MockFunction],
        "loadAll": [MockFunction],
        "login": [MockFunction],
        "once": [MockFunction],
        "prependListener": [MockFunction],
        "prependOnceListener": [MockFunction],
        "rawListeners": [MockFunction],
        "removeAllListeners": [MockFunction],
        "removeListener": [MockFunction],
        "setInterval": [MockFunction],
        "setMaxListeners": [MockFunction],
        "setTimeout": [MockFunction],
        "settings": SequelizeProvider {
          "clear": [MockFunction],
          "delete": [MockFunction],
          "get": [MockFunction],
          "init": [MockFunction],
          "set": [MockFunction],
        },
        "sweepMessages": [MockFunction],
        "syncGuilds": [MockFunction],
      },
      Object {
        "test": true,
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;

exports[`client should register sequelize as settings provider 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      [MockFunction],
      Object {
        "dataColumn": "settings",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": undefined,
    },
  ],
}
`;
